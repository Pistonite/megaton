# This serves as the spec for the Megaton.toml configuration
# if default value is not specified in the comments, whatever
# the value is is the default

[megaton]
# version of the megaton build tool/library the project is supposed to use
# megaton build tool should check this (if specified), and abort
# if the project version doesn't match the build tool's version
# 1 means it works with version number 0.1.x
#
# default: none (no version check)
version = 1

# if megaton library should be used
# if false, then:
# - megaton will not generate the megaton library in <target>/,
#   and will not add megaton library's sources and includes
# - megaton will also not add it's linker script
# - rust support is not allowed (must be true if build.cargo.enabled = true)
#
# this allows user to use megaton build tool by itself, with another runtime library
#
# default: true
library = true

# the entry point (real main function) passed to the linker
# in megaton library, this function is a shim for the megaton_main user defined
# main function that runs additional initializations
#
# can only be specified in megaton = false
#
entry = "__megaton_module_entry"

[module]
# name of the module, which is used as the name of the finary
# binary. only alphanumeric characters and -/_ should be allowed
#
# required, no default, cannot be "lib"
name = "NAME"

# title id of the game, used to generate the NPDM file
#
# required, no default
title-id = 0x0

# location of the target directory to put all megaton output
# the directory structure will look like this:
# <target>/megaton
#   - <profile>/: per-profile build files
#     - lib/: where megaton emits it's own library file and build files
#       - include/: megaton's include path
#         - rust/cxx.h: header from cxxbridge
#         - megaton/: megaton headers
#       - src/: megaton's C/C++/S/RS source files
#       - dep/*: megaton's dependent Rust crates
#       - Cargo.toml: generate Cargo.toml workspace shim (this needs a [workspace] section)
#     - <module>/: per-module build files
#       - include/: generated header files
#       - o/: output object files
#       - <module>.elf
#       - <module>.nso
#       - ...: other output files and caches
#
# default is "target" in the current directory (regardless of Cargo workspace)
target = "target"

# the compile database for megaton to write build commands to, for clangd
# megaton should write a modified command that works for clangd,
# not the actual command passed to compiler (due to compatibility issue)
# 
# default is git root (the first directory that has a .git file/dir
# in the path to /)
compdb = "compile_commands.json"

[profile]
# if the base profile "none" is allowed to be built.
# default: true
allow-base = true
# if specified, then omitting -p PROFILE in the command line
# will build this profile instead of the "none" profile
# if empty then -p PROFILE must be specified on the command line
default = ""

# *profile enabled* means the user can define overrides in a profile
# for example build.profiles.foo for the build configuration in the foo profile

[build] # *profile enabled*

# list of source directories to recursively scan for C/C++/S source files
# paths are relative to the directory Megaton.toml is in
# megaton-generated sources (library and cxx) don't have to be specified,
# they will be added automatically by the build tool
# 
# source language is matched by file extension, case-insensitive
# - .c: C (compiled with CC)
# - .cc, .cpp, .c++, .cxx: C++ (compiled with CXX)
# - .asm, .s: Assembly (compiled with AS)
#
# profile behavior: append
sources = []

# list of header include directories.
# paths are relative to the directory Megaton.toml is in
# megaton-generated includes (library and cxx) don't have to be specified,
#
# profile behavior: append
includes = []

# list of paths to be added as -L flags
# paths are relative to the directory Megaton.toml is in
#
# profile behavior: append
libpaths = []

# list of libraries to be linked. (-l flags)
# for example, "foo" means add `-lfoo` flag to linker.
# these libraries should be discoverable in libpaths (in the order specified in libpaths)
# the library file must have ".so" suffix and "lib" prefix, for example,
# "libfoo.so" if "foo" is specified. If any of the library files change,
# the ELF needs to be relinked
#
# profile behavior: append
libraries = []

# additional .o and .a objects to link with
# paths are relative to the directory Megaton.toml is in
#
# profile behavior: append
objects = []

[build.flags] # this is also profile enabled since it's part of [build]
# see old megaton's documentation: https://megaton.pistonite.dev/config/build_flags.html
common = ["<default>"]
c = ["<default>"]
cxx = ["<default>"]
as = ["<default>"]
ld = ["<default>"]

# corresponds to RUSTFLAGS environment variable, values are concatenated and not escaped
# can only be specified if build.cargo.enabled = true
rust = ["<default>"]

[build.cargo] # this is also profile enabled since it's part of [build]
# if Rust is enabled
#
# build tool will only generate and do rust related stuff if this is enabled
#
# default: true if manifest is specified, or Cargo.toml is found in the directory
# Megaton.toml is in
enabled = true

# the manifest file path (passed to --manifest-path to cargo)
# relative to the directory Megaton.toml is in
# default: Cargo.toml
manifest = "Cargo.toml"

# the source tree to scan for cxxbridge
# relative to directory that Megaton.toml is in
# default: the "src" directory in the directory Cargo.toml is in
src = "src"

# the directory name to put under include/ for generated headers
# for example, "foo" means user will include generated headers
# like #include <foo/lib.rs.h>
# 
# default is same as the crate name found in Cargo.toml
header-target = ""

# suffix to generated headers.
# for example lib.rs will become lib.rs.h
# user can put empty string here for example, then they
# can do #include <foo/lib.rs> for the immersion
header-suffix = ".h"

# if debug info should be kept in release mode
# correspond to CARGO_PROFILE_RELEASE_DEBUG=true environment variable
debug-info = false

# extra build flags to pass to cargo (like feature flags)
# <default> is: --release --target aarch64-unknown-hermit
args = ["<default>"]

[check] # *profile enabled*

# list of symbols to ignore from the checker
ignore = []

# paths to *.syms files (output of objdump -T)
# relative to directory Megaton.toml is in
symbols = []

# instruction patterns to disallow in the final output
# regular expressions.
# these are added on top of a known list of instructions
# that will not work.
# (this is mainly for megaton development)
disallowed-instructions = []
